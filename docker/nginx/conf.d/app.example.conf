# ==========================================================================
# IOTCNT - Nginx Configuration Example
# ==========================================================================
#
# IMPORTANTE:
# 1. Copie este arquivo para app.conf
# 2. Ajuste server_name para seu domínio
# 3. Configure SSL para produção
# 4. Ajuste configurações conforme necessário
#

# --------------------------------------------------------------------------
# HTTP Server (Redirect to HTTPS in production)
# --------------------------------------------------------------------------
server {
    listen 80;
    server_name localhost seu-dominio.com www.seu-dominio.com;  # ⚠️ ALTERAR
    root /var/www/public;
    index index.php index.html index.htm;

    # Para produção, descomente para redirecionar para HTTPS:
    # return 301 https://$server_name$request_uri;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Remove server signature
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss
        application/json
        application/javascript
        image/svg+xml;

    # Main location
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP processing
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;

        # Increase timeout for long-running requests
        fastcgi_read_timeout 300;
        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;

        # Buffer settings
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;
    }

    # ESP32 API endpoints - specific settings
    location /api/esp32/ {
        try_files $uri $uri/ /index.php?$query_string;

        # Specific settings for ESP32 communication
        client_max_body_size 10M;
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;

        # Rate limiting for ESP32 (opcional)
        # limit_req zone=esp32 burst=10 nodelay;

        # Allow specific ESP32 IPs (opcional)
        # allow 192.168.1.0/24;
        # deny all;
    }

    # Telegram webhook endpoint
    location /telegram/webhook {
        try_files $uri $uri/ /index.php?$query_string;

        # Allow only Telegram IPs (opcional - descomente se necessário)
        # allow 149.154.160.0/20;
        # allow 91.108.4.0/22;
        # deny all;

        # Rate limiting
        # limit_req zone=telegram burst=5 nodelay;
    }

    # Static files caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        access_log off;
    }

    # Deny access to sensitive files
    location ~ /\.(?!well-known).* {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /\.env {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /composer\.(json|lock) {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /package\.json {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /docker-compose\.yml {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block access to backup files
    location ~ \.(bak|backup|old|tmp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Error and access logs
    error_log /var/log/nginx/error.log warn;
    access_log /var/log/nginx/access.log;
}

# --------------------------------------------------------------------------
# HTTPS Server (Production)
# --------------------------------------------------------------------------
# Descomente e configure para produção com SSL
#
# server {
#     listen 443 ssl http2;
#     server_name seu-dominio.com www.seu-dominio.com;  # ⚠️ ALTERAR
#     root /var/www/public;
#     index index.php index.html index.htm;
#
#     # SSL Configuration
#     ssl_certificate /etc/nginx/ssl/seu-dominio.com.crt;      # ⚠️ ALTERAR
#     ssl_certificate_key /etc/nginx/ssl/seu-dominio.com.key;  # ⚠️ ALTERAR
#
#     # SSL Settings
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#
#     # HSTS (HTTP Strict Transport Security)
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#     # Security headers (enhanced for HTTPS)
#     add_header X-Frame-Options "SAMEORIGIN" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
#     add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';" always;
#
#     # Rest of configuration same as HTTP server...
#     # (copy all location blocks from HTTP server)
# }

# --------------------------------------------------------------------------
# Rate Limiting (opcional)
# --------------------------------------------------------------------------
# Adicione no bloco http do nginx.conf principal:
#
# http {
#     # Rate limiting zones
#     limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
#     limit_req_zone $binary_remote_addr zone=esp32:10m rate=1r/s;
#     limit_req_zone $binary_remote_addr zone=telegram:10m rate=5r/m;
#
#     # Connection limiting
#     limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
#     limit_conn conn_limit_per_ip 20;
# }

# --------------------------------------------------------------------------
# Configurações de Segurança Adicionais
# --------------------------------------------------------------------------
# 1. Firewall:
#    - Permitir apenas portas 80 e 443
#    - Bloquear acesso direto às portas da DB (3306) e Redis (6379)
#
# 2. SSL/TLS:
#    - Use certificados válidos (Let's Encrypt recomendado)
#    - Configure renovação automática
#
# 3. Backup:
#    - Faça backup dos certificados SSL
#    - Monitore expiração dos certificados
#
# 4. Monitorização:
#    - Configure logs de acesso e erro
#    - Monitore tentativas de acesso suspeitas
#
# 5. Performance:
#    - Ajuste worker_processes conforme CPU
#    - Configure cache adequadamente
#    - Use CDN para assets estáticos (opcional)
# --------------------------------------------------------------------------
