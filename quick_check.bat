@echo off
setlocal enabledelayedexpansion

:: IOTCNT Quick System Check
:: Fast verification of system status and health

title IOTCNT - Verifica√ß√£o R√°pida

:: Colors for output
set "GREEN=[92m"
set "RED=[91m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "CYAN=[96m"
set "WHITE=[97m"
set "RESET=[0m"

echo %CYAN%
echo  ‚ö° IOTCNT - Verifica√ß√£o R√°pida
echo  ============================
echo %RESET%

:: Detect Docker Compose command
docker compose version >nul 2>&1
if %errorLevel% equ 0 (
    set "DOCKER_CMD=docker compose"
) else (
    docker-compose --version >nul 2>&1
    if %errorLevel% equ 0 (
        set "DOCKER_CMD=docker-compose"
    ) else (
        echo %RED%‚ùå Docker n√£o encontrado%RESET%
        pause
        exit /b 1
    )
)

echo %WHITE%Verifica√ß√£o R√°pida do Sistema IOTCNT%RESET%
echo.

:: Check 1: Docker
echo %BLUE%üê≥ Docker:%RESET%
docker --version | findstr "version" >nul
if %errorLevel% equ 0 (
    echo   %GREEN%‚úÖ Docker instalado%RESET%
) else (
    echo   %RED%‚ùå Docker n√£o encontrado%RESET%
)

:: Check 2: Containers
echo %BLUE%üì¶ Containers:%RESET%
%DOCKER_CMD% ps --format "table {{.Names}}\t{{.Status}}" 2>nul | findstr "Up" >nul
if %errorLevel% equ 0 (
    echo   %GREEN%‚úÖ Containers em execu√ß√£o%RESET%
    for /f "skip=1 tokens=1,2" %%a in ('%DOCKER_CMD% ps --format "{{.Names}} {{.Status}}" 2^>nul') do (
        echo %%b | findstr "Up" >nul
        if !errorLevel! equ 0 (
            echo     %GREEN%‚Ä¢ %%a: ATIVO%RESET%
        ) else (
            echo     %RED%‚Ä¢ %%a: INATIVO%RESET%
        )
    )
) else (
    echo   %RED%‚ùå Nenhum container ativo%RESET%
)

:: Check 3: Web Server
echo %BLUE%üåê Servidor Web:%RESET%
powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost' -TimeoutSec 5; if ($response.StatusCode -eq 200) { exit 0 } else { exit 1 } } catch { exit 1 }" >nul 2>&1
if %errorLevel% equ 0 (
    echo   %GREEN%‚úÖ Web online: http://localhost%RESET%
) else (
    echo   %RED%‚ùå Web offline%RESET%
)

:: Check 4: Database
echo %BLUE%üóÑÔ∏è  Base de Dados:%RESET%
%DOCKER_CMD% exec -T app php artisan tinker --execute="try { DB::connection()->getPdo(); echo 'DB_OK'; } catch(Exception \$e) { echo 'DB_ERROR'; }" 2>nul | findstr "DB_OK" >nul
if %errorLevel% equ 0 (
    echo   %GREEN%‚úÖ Base de dados conectada%RESET%
) else (
    echo   %RED%‚ùå Base de dados desconectada%RESET%
)

:: Check 5: Redis Cache
echo %BLUE%üîß Cache Redis:%RESET%
%DOCKER_CMD% exec -T app php artisan tinker --execute="try { Redis::ping(); echo 'REDIS_OK'; } catch(Exception \$e) { echo 'REDIS_ERROR'; }" 2>nul | findstr "REDIS_OK" >nul
if %errorLevel% equ 0 (
    echo   %GREEN%‚úÖ Redis conectado%RESET%
) else (
    echo   %RED%‚ùå Redis desconectado%RESET%
)

:: Check 6: Performance System (NEW!)
echo %BLUE%üìä Sistema de Performance:%RESET%
powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost/admin/performance' -TimeoutSec 5; if ($response.StatusCode -eq 200) { exit 0 } else { exit 1 } } catch { exit 1 }" >nul 2>&1
if %errorLevel% equ 0 (
    echo   %GREEN%‚úÖ Performance dispon√≠vel: /admin/performance%RESET%
) else (
    echo   %RED%‚ùå Performance indispon√≠vel%RESET%
)

:: Check 7: Admin Panel
echo %BLUE%üîß Painel Admin:%RESET%
powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost/admin/dashboard' -TimeoutSec 5; if ($response.StatusCode -eq 200) { exit 0 } else { exit 1 } } catch { exit 1 }" >nul 2>&1
if %errorLevel% equ 0 (
    echo   %GREEN%‚úÖ Admin dispon√≠vel: /admin/dashboard%RESET%
) else (
    echo   %RED%‚ùå Admin indispon√≠vel%RESET%
)

:: Check 8: API Endpoints
echo %BLUE%üîå API ESP32:%RESET%
powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost/api/ping' -TimeoutSec 5; if ($response.StatusCode -eq 200) { exit 0 } else { exit 1 } } catch { exit 1 }" >nul 2>&1
if %errorLevel% equ 0 (
    echo   %GREEN%‚úÖ API ESP32 dispon√≠vel%RESET%
) else (
    echo   %RED%‚ùå API ESP32 indispon√≠vel%RESET%
)

:: Check 9: Configuration Files
echo %BLUE%‚öôÔ∏è  Configura√ß√£o:%RESET%
if exist ".env" (
    echo   %GREEN%‚úÖ Ficheiro .env existe%RESET%
) else (
    echo   %RED%‚ùå Ficheiro .env n√£o encontrado%RESET%
)

if exist "docker-compose.yml" (
    echo   %GREEN%‚úÖ docker-compose.yml existe%RESET%
) else (
    echo   %RED%‚ùå docker-compose.yml n√£o encontrado%RESET%
)

:: Check 10: Disk Space
echo %BLUE%üíæ Espa√ßo em Disco:%RESET%
for /f "tokens=3" %%a in ('dir /-c 2^>nul ^| findstr "bytes free"') do (
    set free_space=%%a
)
if defined free_space (
    echo   %GREEN%‚úÖ Espa√ßo livre: !free_space! bytes%RESET%
) else (
    echo   %YELLOW%‚ö†Ô∏è  N√£o foi poss√≠vel verificar espa√ßo%RESET%
)

:: Summary
echo.
echo %CYAN%========================================%RESET%

:: Count successful checks
set success_count=0
powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost' -TimeoutSec 3; if ($response.StatusCode -eq 200) { exit 0 } else { exit 1 } } catch { exit 1 }" >nul 2>&1
if %errorLevel% equ 0 set /a success_count+=1

%DOCKER_CMD% ps --format "{{.Names}}" 2>nul | findstr "app" >nul
if %errorLevel% equ 0 set /a success_count+=1

%DOCKER_CMD% exec -T app php artisan tinker --execute="try { DB::connection()->getPdo(); echo 'OK'; } catch(Exception \$e) { echo 'ERROR'; }" 2>nul | findstr "OK" >nul
if %errorLevel% equ 0 set /a success_count+=1

if exist ".env" set /a success_count+=1

if %success_count% geq 3 (
    echo %GREEN%üéâ Sistema funcionando bem! (%success_count%/4 verifica√ß√µes OK)%RESET%
    echo.
    echo %WHITE%Interfaces dispon√≠veis:%RESET%
    echo   üåê Principal: http://localhost
    echo   üîß Admin: http://localhost/admin/dashboard
    echo   üìä Performance: http://localhost/admin/performance
) else (
    echo %RED%‚ö†Ô∏è  Sistema com problemas (%success_count%/4 verifica√ß√µes OK)%RESET%
    echo.
    echo %YELLOW%Sugest√µes:%RESET%
    echo   ‚Ä¢ Execute: start_iotcnt.bat para iniciar
    echo   ‚Ä¢ Execute: iotcnt_complete.bat para gest√£o completa
    echo   ‚Ä¢ Verifique se Docker Desktop est√° em execu√ß√£o
)

echo %CYAN%========================================%RESET%
echo.

set /p action="Abrir interface principal? (s/n): "
if /i "!action!"=="s" (
    start http://localhost
)

pause
exit /b 0
